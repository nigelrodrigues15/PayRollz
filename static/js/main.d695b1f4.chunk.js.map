{"version":3,"sources":["actions/employee_actions.js","reducers/employeeReducer.js","reducers/monthsReducer.js","reducers/rootReducer.js","components/landing/landing.jsx","components/landing/landing_container.jsx","actions/database_actions.js","components/dashboard/dashboard.jsx","components/dashboard/dashboard_container.jsx","components/employee/payslipForm.jsx","components/employee/employee.jsx","components/employee/employee_container.jsx","components/employeeForm/employeeForm.jsx","components/employeeForm/employeeForm_container.jsx","App.js","serviceWorker.js","index.js","store.js"],"names":["createEmployee","employeeInfo","dispatch","type","showEmployee","employeeId","removeEmployee","initialState","employeeReducer","state","action","Object","freeze","newState","merge","employeeID","info","push","payload","monthsReducer","console","log","appReducer","combineReducers","employees","months","rootReducer","database","Landing","props","fileReader","FileReader","onload","event","setDatabase","JSON","parse","target","result","history","className","onChange","file","readAsText","onError","err","accepts","maxFileSize","minFileSize","clickable","Button","id","variant","component","color","style","fontSize","marginRight","React","Component","withRouter","connect","ownprops","Dashboard","this","map","employee","i","to","size","name","month","letterSpacing","employeeList","monthList","PayslipForm","employeeParam","payslipParam","payendDate","regHrs","wage","otHrs","holidayHrs","incentive","employerHealth","EI","CPP","Tax","employeeHealth","handleInput","bind","setState","currentTarget","value","dateParts","split","Date","totalReg","getTime","parseFloat","totalOT","totalHld","key","TextField","label","multiline","rowsMax","utils","DateFnsUtils","disableToolbar","format","margin","KeyboardButtonProps","todaysDate","results","TableContainer","Paper","Table","aria-label","TableHead","TableRow","TableCell","colSpan","align","toUpperCase","dateselect","TableBody","textarea","defaultWage","toFixed","defaultEEhealth","defaultERhealth","Employee","parameters","handleUpdate","updateEmployee","payslips","place","data","keys","includes","placeholder","payslip","paymentDate","vacationPay","totalEarn","totalDeduct","toLocaleString","toLocaleDateString","String","payslipList","iframe","document","frames","getElementById","iframeWindow","contentWindow","focus","print","fontWeight","onClick","payslipsList","reverse","employeeData","match","params","EmployeeForm","DOB","startDate","handleCreate","App","exact","path","DashboardContainer","Boolean","window","location","hostname","preloadedState","require","persistedState","serializedState","localStorage","getItem","error","loadFromLocalStorage","store","createStore","applyMiddleware","thunk","ReactDOM","render","subscribe","stringify","setItem","save2localStorage","getState","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d695b1f4.chunk.js","sourcesContent":["export const UPDATE_EMPLOYEE = 'UPDATE_EMPLOYEE';\nexport const updateEmployee = (id, info) => dispatch => dispatch({\n    type: UPDATE_EMPLOYEE,\n    employeeID: id,\n    info\n});\n\n\nexport const CREATE_EMPLOYEE = 'CREATE_EMPLOYEE';\nexport const nextEmployeeId = 0;\nexport const createEmployee = (employeeInfo) => dispatch => {\n    dispatch({\n        type: CREATE_EMPLOYEE,\n        employeeInfo\n    })\n};\n\nexport const SHOW_EMPLOYEE = 'SHOW_EMPLOYEE';\nexport const showEmployee = employeeId => {\n    return {\n        type: SHOW_EMPLOYEE,\n        employeeId\n    };\n};\n\nexport const REMOVE_EMPLOYEE = 'REMOVE_EMPLOYEE';\nexport const removeEmployee = (employeeId) => dispatch => {\n    dispatch({\n     type: REMOVE_EMPLOYEE,\n     employeeId\n    })\n};\n","import merge from \"lodash/merge\";\nimport { UPDATE_EMPLOYEE, CREATE_EMPLOYEE, SHOW_EMPLOYEE, REMOVE_EMPLOYEE } from \"../actions/employee_actions\";\n\nconst initialState = {};\n\nconst employeeReducer = (state = initialState, action) => {\n  Object.freeze(state);\n  let newState = merge([], state);\n  switch (action.type) {\n\n    case UPDATE_EMPLOYEE:\n      merge(newState[action.employeeID], action.info);\n    return newState;\n\n    case CREATE_EMPLOYEE:\n      newState.push(action.employeeInfo)\n    return newState;\n\n    case SHOW_EMPLOYEE:\n    return action.payload;\n\n    case REMOVE_EMPLOYEE:\n    return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default employeeReducer;","import merge from \"lodash/merge\";\n// import { UPDATE_EMPLOYEE, CREATE_EMPLOYEE, SHOW_EMPLOYEE, REMOVE_EMPLOYEE } from \"../actions/employee_actions\";\n\n\nconst monthsReducer = (state = {}, action) => {\n  Object.freeze(state);\n  let newState = merge({}, state);\n  console.log(state);\n  switch (action.type) {\n\n    case 'UPDATE_EMPLOYEE':\n      console.log('fetching employees')\n      console.log(newState)\n      // merge(newState,{[action.company.id]: action.company});\n\n      return state;\n\n    case 'CREATE_EMPLOYEE':\n      return state\n\n    case 'SHOW_EMPLOYEE':\n      return state;\n\n    case 'REMOVE_EMPLOYEE':\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default monthsReducer;","import { combineReducers } from 'redux';\nimport employeeReducer from './employeeReducer';\nimport monthsReducer from './monthsReducer';\n\nconst appReducer = combineReducers({\n    employees: employeeReducer,\n    months: monthsReducer\n  })\n  \nconst rootReducer = (state, action) => {\n\n    if (action.type === 'SET_DATABASE') {\n        return action.database\n    }\n\n    return appReducer(state, action)\n  }\n\nexport default rootReducer","import React from \"react\";\nimport Button from '@material-ui/core/Button';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport AddIcon from '@material-ui/icons/Add';\nimport { Link, withRouter } from \"react-router-dom\";\nimport Files from 'react-files'\nimport { setDatabase } from \"../../actions/database_actions\";\n\n\nclass Landing extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.fileReader = new FileReader();\n\n        this.fileReader.onload = (event) => {\n            debugger\n            this.props.setDatabase(JSON.parse(event.target.result));\n            this.props.history.push(`/dashboard`);\n        };\n\n    }\n\n    render() {\n        return (\n            <div className=\"landing\">\n                <div className='landing-image'></div>\n                <Files\n                    className=\"files-dropzone\"\n                    onChange={file => {\n                        this.fileReader.readAsText(file[0]);\n                    }}\n                    onError={err => console.log(err)}\n                    accepts={['.json']}\n                    maxFileSize={10000000}\n                    minFileSize={0}\n                    clickable\n                >\n                    <Button id='UIbutton' variant=\"outlined\" component=\"label\" color=\"default\">\n\n                        <h1><CloudUploadIcon style={{ fontSize: 45, marginRight: 45 }} /> Upload Database</h1>\n                    </Button>\n                </Files>\n                <br /><br /><br /><br /><br /><br /><br />\n                <br /><br /><br /><br /><br /><br /><br />\n            </div>\n        );\n    }\n\n}\n\n\nexport default withRouter(Landing);\n{/* <input type=\"file\" style={{ display: \"none\" }} onChange={this.handleFiles}  /> */ }","import { connect } from \"react-redux\";\nimport { setDatabase } from \"../../actions/database_actions\";\nimport Landing from \"./landing\";\n\nconst mapStateToProps = (state, ownprops) => {\n  console.log('mapstate2props')\n  console.log(state)\n  return {};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDatabase: database => dispatch(setDatabase(database)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Landing);","export const SET_DATABASE = 'SET_DATABASE';\nexport const setDatabase = (database) => dispatch => {\n    dispatch({\n        type: SET_DATABASE,\n        database\n    })\n};\n","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport Carousel from 'react-multi-carousel';\nimport 'react-multi-carousel/lib/styles.css';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentWillMount() {\n        console.log('component will mount')\n    }\n\n    employeeList(employees = this.props.employees) {\n        let result = employees.map((employee, i) => {\n            return (\n                <Link className=\"Link\" to={`/employee/${i}`}>\n                    <Button id='button-employee' size=\"large\" className=\"carouselList\" variant=\"outlined\" component=\"label\" color=\"primary\">\n                        <div className='listContent'>{employee.name}</div>\n                    </Button>\n                </Link>\n            )\n        });\n        return result;\n    }\n\n    monthList(months = this.props.months) {\n        let result = months.map((month, i) => {\n            return (\n                <Link className=\"Link\" >\n                    <Button id='button-month' size=\"large\" className=\"carouselList\" variant=\"outlined\" component=\"label\" color=\"primary\">\n                        <div className='listContent'>{month}</div>\n                    </Button>\n                </Link>\n            )\n        });\n        return result;\n    }\n\n    render() {\n\n        const responsive = {\n            superLargeDesktop: {\n                // the naming can be any, depends on you.\n                breakpoint: { max: 4000, min: 3000 },\n                items: 5,\n                partialVisibilityGutter: 40\n            },\n            desktop: {\n                breakpoint: { max: 3000, min: 1024 },\n                items: 3,\n                partialVisibilityGutter: 40\n            },\n            tablet: {\n                breakpoint: { max: 1024, min: 464 },\n                items: 2,\n                partialVisibilityGutter: 30\n            },\n            mobile: {\n                breakpoint: { max: 464, min: 0 },\n                items: 1,\n                partialVisibilityGutter: 30\n            },\n        };\n        var payperiodMonth = 0;\n\n        const handleChange = event => {\n            payperiodMonth = (event.target.value);\n        };\n\n        return (\n            <div className=\"dashboard\">\n                <div className='dashboard-image'></div>\n                <br /><br /><br />\n                <h1 style={{ letterSpacing: 15 }} >DASHBOARD</h1>\n                <br /><br /><br />\n                <div className=\"carousel\">\n                    <h1>EMPLOYEES</h1>\n                    <br />\n                    <div className='carousel-layout'>\n                        <Link className=\"Link doublespan\" to=\"/newEmployee\">\n                            <Button id='button-employee' size='large' className=\"carouselList\" variant=\"outlined\" component=\"label\" color=\"secondary\">\n\n                                <div className='listContent'> + New Employee</div>\n                            </Button>\n                        </Link>\n                        {this.employeeList()}\n                    </div>\n\n                </div>\n                <br /><br /><br />\n                <div className=\"carousel\">\n                    <h1>MONTHLY SUMMARY</h1>\n                    <br/><br/>\n                    <div className='carousel-layout'>\n                        <Link className=\"Link doublespan\" >\n                            <Button id='button-year' size=\"large\" className=\"carouselList\" variant=\"outlined\" component=\"label\" color=\"secondary\">\n                                <div className='listContent'>Year to Date</div>\n                            </Button>\n                        </Link>\n                        {this.monthList()}\n                    </div>\n\n                </div>\n                <br /><br /><br />\n                {/* <div className=\"payperiod\">\n                    <FormControl id='paypperiodMonth'>\n                        <InputLabel id=\"monthLabel\">PayPeriod Month</InputLabel>\n                        <Select\n                            labelId=\"monthLabel\"\n                            id=\"monthSelect\"\n                            value={payperiodMonth}\n                            onChange={handleChange}\n                        >\n                            <MenuItem value=\"month\">\n                                <em>Month</em>\n                            </MenuItem>\n                            <MenuItem value={1}>January</MenuItem>\n                            <MenuItem value={2}>Feburary</MenuItem>\n                            <MenuItem value={3}>March</MenuItem>\n                        </Select>\n                        <FormHelperText>Select PayPeriod Month</FormHelperText>\n                    </FormControl>\n                </div> */}\n            </div>\n        );\n    };\n\n};\n\nexport default withRouter(Dashboard);","import { connect } from \"react-redux\";\n// import { fetchEmployees, createEmployee, showEmployee, removeEmployee } from \"../../actions/employee_actions\";\nimport Dashboard from \"./dashboard\";\n\nconst mapStateToProps = (state, ownprops) => {\n  console.log('mapstate2props')\n  console.log(state)\n  return {\n    employees: state.employees,\n    months: state.months\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    // fetchEmployees: () => dispatch(fetchEmployees()),\n    // createEmployee: employeeInfo => dispatch(createEmployee(employeeInfo)),\n    // showEmployee: () => dispatch(showEmployee()),\n    // removeEmployee: employeeId => dispatch(removeEmployee(employeeId))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Dashboard);","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport TextField from '@material-ui/core/TextField';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {MuiPickersUtilsProvider, KeyboardDatePicker} from '@material-ui/pickers';\n\nclass PayslipForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.employeeParam = {\n            \"name\": \"Name\",\n            \"DOB\": \"Date of Birth\",\n            \"startDate\": \"Start Date\",\n            \"defaultWage\": \"Default Wage\",\n            \"ytdEarnings\": \"YTD Earnings\",\n            \"ytdEI\": \"YTD EI\",\n            \"ytdCPP\": \"YTD CPP\",\n            \"ytdTax\": \"YTD Tax\",\n            \"ytdDeductions\": \"YTD Deductions\"\n        }\n        this.payslipParam = {\n            payendDate: \"Pay End Date\",\n            regHrs: \"Reg. Hrs.\",\n            wage: \"Wage\",\n            otHrs: \"0.00\",\n            holidayHrs: \"0.00\",\n            incentive: \"0.00\",\n            employerHealth: \"13.00\",\n            EI: \"0.00\",\n            CPP: \"0.00\",\n            Tax: \"0.00\",\n            employeeHealth: \"105.00\"\n        };\n        this.state = {\n            payendDate: \"1/10/2010\",\n            regHrs: \"0.00\",\n            wage: \"15.00\",\n            otHrs: \"0.00\",\n            holidayHrs: \"0.00\",\n            incentive: \"0.00\",\n            employerHealth: \"13.00\",\n            EI: \"0.00\",\n            CPP: \"0.00\",\n            Tax: \"0.00\",\n            employeeHealth: \"105.00\"\n        };\n        this.handleInput = this.handleInput.bind(this)\n    }\n\n    handleInput(event) {\n        debugger\n        this.setState({ [event.target.name]: event.currentTarget.value });\n    }\n\n    results() {\n        var dateParts = this.state.payendDate.split(\"/\");\n        var payendDate = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n        let paymentDate = new Date(payendDate.getTime() + (7 * 24 * 60 * 60 * 1000));\n        let totalReg = (parseFloat(this.state.wage) * parseFloat(this.state.regHrs));\n        let totalOT = (parseFloat(this.state.wage) * 1.5 * parseFloat(this.state.otHrs));\n        let totalHld = (parseFloat(this.state.wage) * 1.5 * parseFloat(this.state.holidayHrs));\n        let vacationPay = (totalReg * 0.04);\n        let totalEarn = totalReg + totalOT + totalHld + vacationPay;\n        let totalDeduct = parseFloat(this.state.EI) + parseFloat(this.state.CPP) + parseFloat(this.state.Tax) + parseFloat(this.state.employeeHealth)\n        return {\n            totalReg: totalReg,\n            totalOT: totalOT,\n            totalHld\n        }\n    }\n\n    textarea(key, value = \"--\") {\n\n        return (\n            <TextField\n                id=\"outlined-multiline-flexible\"\n                label={this.payslipParam[key]}\n                name={key}\n                multiline\n                rowsMax=\"4\"\n                value={value}\n                onChange={this.handleInput}\n                variant=\"outlined\"\n            />\n        );\n    }\n    dateselect(label, value) {\n        \n        return (\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <KeyboardDatePicker\n                    disableToolbar\n                    variant=\"inline\"\n                    format=\"dd/MM/yyyy\"\n                    margin=\"normal\"\n                    id=\"date-picker-inline\"\n                    label={label}\n                    value={value}\n                    onChange={this.handleInput}\n                    KeyboardButtonProps={{\n                        'aria-label': 'change date',\n                    }}\n                />\n            </MuiPickersUtilsProvider>\n        );\n    }\n\n    render() {\n        let todaysDate = new Date();\n        let results = this.results()\n        console.log(todaysDate)\n        return (\n            <div className=\"newpayslip\">\n                <div key={\"i\"} id=\"pay\" className={\"paycheck\"}>\n                    <br /><br />\n                    <TableContainer component={Paper}>\n                        <Table className={\"classes.table\"} aria-label=\"simple table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell colSpan={4}><h2 style={{ letterSpacing: 5 }}>Create a new Payslip</h2></TableCell>\n                                    <TableCell align=\"center\" colSpan={4}><h2 style={{ letterSpacing: 5 }}>{this.props.employee.name.toUpperCase()}</h2></TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell ><h4 style={{ letterSpacing: 5 }}>Pay End Date</h4></TableCell>\n                                    <TableCell align=\"center\" colSpan={2}><h4 style={{ letterSpacing: 5 }}>{this.dateselect(\"Pay End Date\", todaysDate)}</h4></TableCell>\n                                    <TableCell align=\"center\" colSpan={2}></TableCell>\n                                    <TableCell ><h4 style={{ letterSpacing: 5 }}>Payment Date</h4></TableCell>\n                                    <TableCell align=\"center\" colSpan={2}><h4 style={{ letterSpacing: 5 }}>{this.dateselect(\"Payment Date\", todaysDate)}</h4></TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell><h3>Earnings</h3></TableCell>\n                                    <TableCell align=\"right\"><h3>Hours</h3></TableCell>\n                                    <TableCell align=\"right\"><h3>Rate</h3></TableCell>\n                                    <TableCell align=\"right\"><h3>Total</h3></TableCell>\n                                    <TableCell align=\"right\"><h3>YTD</h3></TableCell>\n                                    <TableCell><h3>Deductions</h3></TableCell>\n                                    <TableCell align=\"right\"><h3>Total</h3></TableCell>\n                                    <TableCell align=\"right\"><h3>YTD</h3></TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                <TableRow key='{row.name}'>\n                                    <TableCell><h4>Regular</h4></TableCell>\n                                    <TableCell align=\"right\"><h4>{this.textarea('regHrs', this.state.regHrs)}</h4></TableCell>\n                                    <TableCell align=\"right\"><h4>{this.textarea('wage', this.props.employee.defaultWage)}</h4></TableCell>\n                                    <TableCell align=\"right\"><h4>{results.totalReg.toFixed(2)}</h4></TableCell>\n                                    <TableCell align=\"right\"><h4></h4></TableCell>\n                                    <TableCell><h4>Employment Insurance</h4></TableCell>\n                                    <TableCell align=\"right\"><h4>{\"EI\"}</h4></TableCell>\n                                    <TableCell align=\"right\"><h4></h4></TableCell>\n                                </TableRow>\n                                <TableRow key='{row.name}'>\n                                    <TableCell><h4>Overtime</h4></TableCell>\n                                    <TableCell align=\"right\"><h4>{this.textarea(\"Overtime. Hrs.\")}</h4></TableCell>\n                                    <TableCell align=\"right\"><h4>{\"1.5xwage\"}</h4></TableCell>\n                                    <TableCell align=\"right\"><h4>{\"totalOT\"}</h4></TableCell>\n                                    <TableCell align=\"right\"><h4></h4></TableCell>\n                                    <TableCell><h4>Canada Pension Plan</h4></TableCell>\n                                    <TableCell align=\"right\"><h4>{\"CPP\"}</h4></TableCell>\n                                    <TableCell align=\"right\"><h4></h4></TableCell>\n                                </TableRow>\n                                <TableRow key='{row.name}'>\n                                    <TableCell><h4>Holiday Pay</h4></TableCell>\n                                    <TableCell align=\"right\"><h4>{this.textarea(\"Holiday Hrs.\")}</h4></TableCell>\n                                    <TableCell align=\"right\"><h4>{\"1.5xwage\"}</h4></TableCell>\n                                    <TableCell align=\"right\"><h4>{\"totalHld\"}</h4></TableCell>\n                                    <TableCell align=\"right\"><h4></h4></TableCell>\n                                    <TableCell><h4>Total Tax Deductions</h4></TableCell>\n                                    <TableCell align=\"right\"><h4>{\"Total Tax\"}</h4></TableCell>\n                                    <TableCell align=\"right\"><h4></h4></TableCell>\n                                </TableRow>\n                                <TableRow key='{row.name}'>\n                                    <TableCell><h4>Performance Incentive</h4></TableCell>\n                                    <TableCell align=\"right\"><h4></h4></TableCell>\n                                    <TableCell align=\"right\"><h4>{this.textarea(\"Performance\")}</h4></TableCell>\n                                    <TableCell align=\"right\"><h4>{\"incentive\"}</h4></TableCell>\n                                    <TableCell align=\"right\"><h4></h4></TableCell>\n                                    <TableCell><h4>Employee Health Benefit Contribution</h4></TableCell>\n                                    <TableCell align=\"right\"><h4>{this.textarea(\"Health\", this.props.employee.defaultEEhealth)}</h4></TableCell>\n                                    <TableCell align=\"right\"><h4></h4></TableCell>\n                                </TableRow>\n                                <TableRow key='{row.name}'>\n                                    <TableCell><h4>Vacation Pay</h4></TableCell>\n                                    <TableCell align=\"right\"><h4></h4></TableCell>\n                                    <TableCell align=\"right\"><h4></h4></TableCell>\n                                    <TableCell align=\"right\"><h4>{\"vacatioon\"}</h4></TableCell>\n                                    <TableCell align=\"right\"><h4></h4></TableCell>\n                                    <TableCell><h4></h4></TableCell>\n                                    <TableCell align=\"right\"><h4></h4></TableCell>\n                                    <TableCell align=\"right\"><h4></h4></TableCell>\n                                </TableRow>\n                                <TableRow key='{row.name}'>\n                                    <TableCell><h4>Employer Health Benefit Contribution</h4></TableCell>\n                                    <TableCell align=\"right\"><h4></h4></TableCell>\n                                    <TableCell align=\"right\"><h4></h4></TableCell>\n                                    <TableCell align=\"right\"><h4>{this.textarea(\"Health\", this.props.employee.defaultERhealth)}</h4></TableCell>\n                                    <TableCell align=\"right\"><h4></h4></TableCell>\n                                    <TableCell><h4></h4></TableCell>\n                                    <TableCell align=\"right\"><h4></h4></TableCell>\n                                    <TableCell align=\"right\"><h4></h4></TableCell>\n                                </TableRow>\n                                <TableRow key='{row.name}'>\n                                    <TableCell><h4>Total Earnings</h4></TableCell>\n                                    <TableCell align=\"right\"><h4></h4></TableCell>\n                                    <TableCell align=\"right\"><h4></h4></TableCell>\n                                    <TableCell align=\"right\"><h4>{\"totalEarn\"}</h4></TableCell>\n                                    <TableCell align=\"right\"><h4>YTD amount</h4></TableCell>\n                                    <TableCell><h4>Total Deductions</h4></TableCell>\n                                    <TableCell align=\"right\"><h4>{\"totalDeduct\"}</h4></TableCell>\n                                    <TableCell align=\"right\"><h4>YTD amount</h4></TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell align=\"right\" colSpan={2}><h4 style={{ letterSpacing: 5 }}>Net Pay</h4></TableCell>\n                                    <TableCell align=\"left\" colSpan={2}><h4 >{\"(totalEarn - totalDeduct)\"}</h4></TableCell>\n                                    <TableCell align=\"right\" colSpan={2}><h4 style={{ letterSpacing: 5 }}>YTD Net Pay</h4></TableCell>\n                                    <TableCell align=\"left\" colSpan={2}><h4>ToBeFilled</h4></TableCell>\n                                </TableRow>\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <br/>\n                    <div className=\"payslipformActions\">\n                        <Button id='button-create' variant=\"outlined\" component=\"label\" color=\"secondary\">\n                            Create\n                        </Button>\n                    </div>\n                    <br /><br />\n                </div>\n\n\n            </div>\n        );\n    }\n\n}\n\n\nexport default withRouter(PayslipForm);","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport TextField from '@material-ui/core/TextField';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport PayslipForm from \"./payslipForm\"\nimport Button from '@material-ui/core/Button';\nimport merge from \"lodash/merge\";\n\nclass Employee extends React.Component {\n    constructor(props) {\n        super(props);\n        this.parameters = {\n            \"name\": \"Name\",\n            \"DOB\": \"Date of Birth\",\n            \"startDate\": \"Start Date\",\n            \"defaultWage\": \"Wage\",\n            \"defaultEEhealth\": \"Employee Health Contr.\",\n            \"defaultERhealth\": \"Employer Health Contr.\"\n        }\n        this.state = this.props.employee\n        this.handleInput = this.handleInput.bind(this);\n        this.handleUpdate = this.handleUpdate.bind(this);\n    }\n    handleInput(event) {\n        this.setState({ [event.target.name]: event.currentTarget.value });\n    }\n    handleUpdate(){\n        this.props.updateEmployee(this.props.employeeID, this.state);\n    }\n    employeeList(employee = merge({}, this.state)) {\n        delete employee.payslips\n        let data = Object.keys(employee);\n        let i = 0;\n        let place;\n\n        let result = data.map((key, i) => {\n            if (this.parameters[key].includes(\"Date\")) {\n                place = \"DD/MM/YYYY\"\n            } else {\n                place = \"\"\n            }\n            return (\n                <div key={i} className={\"info-\" + key}>\n                    <TextField\n                        id=\"outlined-multiline-flexible\"\n                        label={this.parameters[key]}\n                        multiline\n                        rowsMax=\"4\"\n                        name={key}\n                        value={employee[key]}\n                        placeholder={place}\n                        onChange={this.handleInput}\n                        variant=\"outlined\"\n                    />\n                </div>\n            )\n        });\n        return result;\n    }\n    payslipList(payslip, employee) {\n        var dateParts = payslip.payendDate.split(\"/\");\n        var payendDate = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]); \n        let paymentDate = new Date(payendDate.getTime() + (7 * 24 * 60 * 60 * 1000));\n        let totalReg = (parseFloat(payslip.wage) * parseFloat(payslip.regHrs));\n        let totalOT = (parseFloat(payslip.wage)* 1.5 * parseFloat(payslip.otHrs));\n        let totalHld = (parseFloat(payslip.wage) * 1.5 * parseFloat(payslip.holidayHrs));\n        let vacationPay = (totalReg * 0.04);\n        let totalEarn = totalReg + totalOT + totalHld + vacationPay;\n        let totalDeduct = parseFloat(payslip.EI) + parseFloat(payslip.CPP) + parseFloat(payslip.Tax) + parseFloat(payslip.employeeHealth)\n        return (\n            <div key={\"i\"} id=\"pay\" className={\"paycheck\"}>\n                <br/><br/>\n                <TableContainer component={Paper}>\n                    <Table className={\"classes.table\"} aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell><h2 style={{ letterSpacing: 5}}>EDO JAPAN</h2></TableCell>\n                                <TableCell align=\"center\" colSpan={7}><h2 style={{ letterSpacing: 5}}>{employee.name.toUpperCase()}</h2></TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell ><h4 style={{ letterSpacing: 5}}>Pay End Date</h4></TableCell>\n                                <TableCell align=\"center\" colSpan={2}><h4 style={{ letterSpacing: 5 }}>{payendDate.toLocaleString(\"en-AU\").split(\",\")[0]}</h4></TableCell>\n                                <TableCell align=\"center\" colSpan={2}></TableCell>\n                                <TableCell ><h4 style={{ letterSpacing: 5}}>Payment Date</h4></TableCell>\n                                <TableCell align=\"center\" colSpan={2}><h4 style={{ letterSpacing: 5 }}>{paymentDate.toLocaleDateString(\"en-AU\").split(\",\")[0]}</h4></TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell><h3>Earnings</h3></TableCell>\n                                <TableCell align=\"right\"><h3>Hours</h3></TableCell>\n                                <TableCell align=\"right\"><h3>Rate</h3></TableCell>\n                                <TableCell align=\"right\"><h3>Total</h3></TableCell>\n                                <TableCell align=\"right\"><h3>YTD</h3></TableCell>\n                                <TableCell><h3>Deductions</h3></TableCell>\n                                <TableCell align=\"right\"><h3>Total</h3></TableCell>\n                                <TableCell align=\"right\"><h3>YTD</h3></TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            <TableRow key='{row.name}'>\n                                <TableCell><h4>Regular</h4></TableCell>\n                                <TableCell align=\"right\"><h4>{payslip.regHrs}</h4></TableCell>\n                                <TableCell align=\"right\"><h4>{payslip.wage}</h4></TableCell>\n                                <TableCell align=\"right\"><h4>{totalReg.toFixed(2)}</h4></TableCell>\n                                <TableCell align=\"right\"><h4></h4></TableCell>\n                                <TableCell><h4>Employment Insurance</h4></TableCell>\n                                <TableCell align=\"right\"><h4>{payslip.EI}</h4></TableCell>\n                                <TableCell align=\"right\"><h4></h4></TableCell>\n                            </TableRow>\n                            <TableRow key='{row.name}'>\n                                <TableCell><h4>Overtime</h4></TableCell>\n                                <TableCell align=\"right\"><h4>{payslip.otHrs}</h4></TableCell>\n                                <TableCell align=\"right\"><h4>{String((parseFloat(payslip.wage) * 1.5).toFixed(2))}</h4></TableCell>\n                                <TableCell align=\"right\"><h4>{totalOT.toFixed(2)}</h4></TableCell>\n                                <TableCell align=\"right\"><h4></h4></TableCell>\n                                <TableCell><h4>Canada Pension Plan</h4></TableCell>\n                                <TableCell align=\"right\"><h4>{payslip.CPP}</h4></TableCell>\n                                <TableCell align=\"right\"><h4></h4></TableCell>\n                            </TableRow>\n                            <TableRow key='{row.name}'>\n                                <TableCell><h4>Holiday Pay</h4></TableCell>\n                                <TableCell align=\"right\"><h4>{payslip.holidayHrs}</h4></TableCell>\n                                <TableCell align=\"right\"><h4>{String((parseFloat(payslip.wage) * 1.5).toFixed(2))}</h4></TableCell>\n                                <TableCell align=\"right\"><h4>{totalHld.toFixed(2)}</h4></TableCell>\n                                <TableCell align=\"right\"><h4></h4></TableCell>\n                                <TableCell><h4>Total Tax Deductions</h4></TableCell>\n                                <TableCell align=\"right\"><h4>{payslip.Tax}</h4></TableCell>\n                                <TableCell align=\"right\"><h4></h4></TableCell>\n                            </TableRow>\n                            <TableRow key='{row.name}'>\n                                <TableCell><h4>Performance Incentive</h4></TableCell>\n                                <TableCell align=\"right\"><h4></h4></TableCell>\n                                <TableCell align=\"right\"><h4>{payslip.incentive}</h4></TableCell>\n                                <TableCell align=\"right\"><h4>{payslip.incentive}</h4></TableCell>\n                                <TableCell align=\"right\"><h4></h4></TableCell>\n                                <TableCell><h4>Employee Health Benefit Contribution</h4></TableCell>\n                                <TableCell align=\"right\"><h4>{payslip.employeeHealth}</h4></TableCell>\n                                <TableCell align=\"right\"><h4></h4></TableCell>\n                            </TableRow>\n                            <TableRow key='{row.name}'>\n                                <TableCell><h4>Vacation Pay</h4></TableCell>\n                                <TableCell align=\"right\"><h4></h4></TableCell>\n                                <TableCell align=\"right\"><h4></h4></TableCell>\n                                <TableCell align=\"right\"><h4>{vacationPay.toFixed(2)}</h4></TableCell>\n                                <TableCell align=\"right\"><h4></h4></TableCell>\n                                <TableCell><h4></h4></TableCell>\n                                <TableCell align=\"right\"><h4></h4></TableCell>\n                                <TableCell align=\"right\"><h4></h4></TableCell>\n                            </TableRow>\n                            <TableRow key='{row.name}'>\n                                <TableCell><h4>Employer Health Benefit Contribution</h4></TableCell>\n                                <TableCell align=\"right\"><h4></h4></TableCell>\n                                <TableCell align=\"right\"><h4></h4></TableCell>\n                                <TableCell align=\"right\"><h4>{payslip.employerHealth}</h4></TableCell>\n                                <TableCell align=\"right\"><h4></h4></TableCell>\n                                <TableCell><h4></h4></TableCell>\n                                <TableCell align=\"right\"><h4></h4></TableCell>\n                                <TableCell align=\"right\"><h4></h4></TableCell>\n                            </TableRow>\n                            <TableRow key='{row.name}'>\n                                <TableCell><h4>Total Earnings</h4></TableCell>\n                                <TableCell align=\"right\"><h4></h4></TableCell>\n                                <TableCell align=\"right\"><h4></h4></TableCell>\n                                <TableCell align=\"right\"><h4>{totalEarn.toFixed(2)}</h4></TableCell>\n                                <TableCell align=\"right\"><h4>YTD amount</h4></TableCell>\n                                <TableCell><h4>Total Deductions</h4></TableCell>\n                                <TableCell align=\"right\"><h4>{totalDeduct.toFixed(2)}</h4></TableCell>\n                                <TableCell align=\"right\"><h4>YTD amount</h4></TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell align=\"right\" colSpan={2}><h4 style={{ letterSpacing: 5 }}>Net Pay</h4></TableCell>\n                                <TableCell align=\"left\" colSpan={2}><h4 >{(totalEarn - totalDeduct).toFixed(2)}</h4></TableCell>\n                                <TableCell align=\"right\" colSpan={2}><h4 style={{ letterSpacing: 5 }}>YTD Net Pay</h4></TableCell>\n                                <TableCell align=\"left\" colSpan={2}><h4 style={{ letterSpacing: 5 }}>ToBeFilled</h4></TableCell>\n                            </TableRow>\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <br/>\n                <div className=\"payslipActions\">\n                    <Button id='button-task' variant=\"outlined\" component=\"label\" color=\"secondary\">\n                        CRA Check\n                    </Button>\n                    <Button id='button-task' variant=\"outlined\" component=\"label\" color=\"secondary\">\n                        Print\n                    </Button>\n                </div>\n                <br/><br/>\n            </div>\n        );\n    }\n    payslipsList(payslips = this.props.payslips){\n        let result = payslips.map((payslip, i) => {\n            return (\n                this.payslipList(payslip, this.props.employee)\n            )\n        });\n        return result;\n    }\n    printIframe() {\n        debugger\n        const iframe = document.frames ? document.frames[\"pay\"] : document.getElementById(\"pay\");\n        const iframeWindow = iframe.contentWindow || iframe;\n\n        iframe.focus();\n        iframeWindow.print();\n\n        return false;\n    };\n\n    render() {\n\n        return (\n            <div className=\"employee\">\n                <div className='employee-image'></div>\n                <br /><br /><br />\n                <h1 style={{ letterSpacing: 15 + 'px', fontWeight: 350 }} >{this.props.employee.name.toUpperCase()}</h1>\n                <br /><br /><br />\n                <div className='employee-info'>\n                    <h2 style={{ letterSpacing: 5 + 'px' }}>INFO</h2>\n                    <br />\n                    <div className=\"basic-info\">\n                        {this.employeeList()}\n                        <Button id='button-func' onClick={this.handleUpdate} variant=\"outlined\" component=\"label\" color=\"secondary\">\n                            Update\n                        </Button>\n                    </div>\n                </div>\n                <h2 style={{ letterSpacing: 5 + 'px' }}>PAYSLIPS</h2>\n                <div className=\"payslips\">\n                    <PayslipForm employee={this.props.employee}/>\n                    {this.payslipsList().reverse()}\n                    <br /><br /><br />\n                    <br /><br /><br />\n                    <br /><br /><br />\n                </div>\n            </div>\n        );\n    }\n\n}\n\n\nexport default withRouter(Employee);","import { connect } from \"react-redux\";\nimport { updateEmployee, createEmployee, showEmployee, removeEmployee } from \"../../actions/employee_actions\";\nimport Employee from \"./employee\";\n\nconst mapStateToProps = (state, ownprops) => {\n  console.log('mapstate2props')\n  console.log(state)\n  let employeeData = state.employees[ownprops.match.params.employeeID]\n  return {\n    employee: employeeData,\n    payslips: employeeData.payslips,\n    employeeID: ownprops.match.params.employeeID\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateEmployee: (id, info) => dispatch(updateEmployee(id, info)),\n    createEmployee: employeeInfo => dispatch(createEmployee(employeeInfo)),\n    showEmployee: () => dispatch(showEmployee()),\n    removeEmployee: employeeId => dispatch(removeEmployee(employeeId))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Employee);","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport merge from \"lodash/merge\";\n\nclass EmployeeForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.parameters = {\n            \"name\": \"Full Name\",\n            \"DOB\": \"Date of Birth\",\n            \"startDate\": \"Start Date\",\n            \"defaultWage\": \"Default Wage\",\n            \"defaultEEhealth\": \"Employee Health Contr.\",\n            \"defaultERhealth\": \"Employer Health Contr.\"\n        }\n        this.state = {\n                name: \"\",\n                DOB: \"\",\n                startDate: \"\",\n                defaultWage: \"15.00\",\n                defaultEEhealth: \"55.00\",\n                defaultERhealth: \"55.00\",\n                payslips:[]\n            };\n        this.handleInput = this.handleInput.bind(this);\n        this.handleCreate = this.handleCreate.bind(this);\n        \n    }\n\n    handleInput(event) {\n        this.setState({ [event.target.name]: event.currentTarget.value });\n    }\n    handleCreate() {\n        this.props.createEmployee(this.state);\n        this.props.history.push(`/dashboard`); \n    }\n    employeeList(employee = merge({}, this.state)) {\n        delete employee.payslips\n        let data = Object.keys(employee);\n        let i = 0;\n        let place;\n        let result = data.map((key, i) => {\n            if (this.parameters[key].includes(\"Date\")){\n                place = \"DD/MM/YYYY\"\n            }else{\n                place=\"\"\n            }\n            return (\n                <div key={i} className={\"info-\" + key}>\n                    <TextField\n                        id=\"outlined-multiline-flexible\"\n                        label={this.parameters[key]}\n                        name={key}\n                        multiline\n                        rowsMax=\"4\"\n                        value={this.state[key]}\n                        placeholder={place}\n                        onChange={this.handleInput}\n                        variant=\"outlined\"\n                    />\n                </div>\n            )\n        });\n        return result;\n    }\n    \n\n\n    render() {\n\n        return (\n            <div className=\"employee\">\n                <div className='employee-image'></div>\n                <br /><br /><br />\n                <h1 style={{ letterSpacing: 15 + 'px', fontWeight: 350 }} >NEW EMPLOYEE</h1>\n                <br /><br /><br />\n                <div className='employee-info'>\n                    <div className=\"basic-info\">\n                        {this.employeeList()}\n                        <Button id='button-func' onClick={this.handleCreate} variant=\"outlined\" component=\"label\" color=\"secondary\">\n                            Create\n                        </Button>\n                    </div>\n                </div>\n                \n            </div>\n        );\n    }\n\n}\n\n\nexport default withRouter(EmployeeForm);","import { connect } from \"react-redux\";\nimport { createEmployee, showEmployee, removeEmployee } from \"../../actions/employee_actions\";\nimport EmployeeForm from \"./employeeForm\";\n\nconst mapStateToProps = (state, ownprops) => {\n  return {\n    \n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createEmployee: employeeInfo => dispatch(createEmployee(employeeInfo)),\n    showEmployee: () => dispatch(showEmployee()),\n    removeEmployee: employeeId => dispatch(removeEmployee(employeeId))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(EmployeeForm);","import React, { Component } from 'react';\nimport { Route, Redirect, Switch, Link, HashRouter } from \"react-router-dom\";\nimport Landing from \"./components/landing/landing_container\";\nimport DashboardContainer from \"./components/dashboard/dashboard_container\";\nimport Employee from \"./components/employee/employee_container\";\nimport EmployeeForm from \"./components/employeeForm/employeeForm_container\";\nimport { connect } from 'react-redux';\nimport './App.css';\n\nclass App extends Component {\n render() {\n  return (\n   <div className=\"App\">\n    \n    <Switch>\n        <Route exact path=\"/dashboard\" component={DashboardContainer} />\n        <Route exact path=\"/employee/:employeeID\" component={Employee} />\n        <Route exact path=\"/newEmployee\" component={EmployeeForm} />\n        <Route exact path=\"/\" component={Landing} />\n    </Switch>\n\n    \n   </div>\n  );\n }\n}\nexport default connect()(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nexport const preloadedState = require('./database.json')\n// export const preloadedState = {}\nconst persistedState = loadFromLocalStorage()\n\nfunction save2localStorage(state) {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('state', serializedState);\n    } catch (error) {\n        console.log(error);\n    }\n}\nfunction loadFromLocalStorage(state) {\n    try {\n        const serializedState = localStorage.getItem('state');\n        if (serializedState === null) return preloadedState;\n        return JSON.parse(serializedState);\n    } catch (error) {\n        console.log(error);\n        return preloadedState;\n    }\n}\n\nlet store = configureStore(persistedState)\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App />\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\nstore.subscribe(() => save2localStorage(store.getState()))\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\n\n// const initialState = {\n//     employees: [],\n//     months: ['Jan', 'Feb', 'Mar']\n// };\n\n\n\nexport default function configureStore(persistedState) {\n    return createStore(rootReducer, persistedState, applyMiddleware(thunk));\n}\n"],"sourceRoot":""}