{"version":3,"sources":["reducers/rootReducer.js","components/landing/landing.jsx","components/dashboard/dashboard.jsx","App.js","serviceWorker.js","index.js","store.js"],"names":["combineReducers","landing","className","to","Button","id","variant","color","startIcon","dashboard","App","exact","path","component","Dashboard","Landing","Component","connect","Boolean","window","location","hostname","match","ReactDOM","render","store","createStore","rootReducer","applyMiddleware","thunk","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAEeA,cAAgB,I,8GC2BhBC,EAvBC,WACZ,OACI,yBAAKC,UAAU,WACX,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,WACX,kBAAC,IAAD,CAAMA,UAAU,OAAOC,GAAG,cACtB,kBAACC,EAAA,EAAD,CAAQC,GAAG,WAAWC,QAAQ,WAAWC,MAAM,UAAUC,UAAW,kBAAC,IAAD,OAApE,qBAKR,6BAAM,6BAAM,6BAAM,6BAClB,yBAAKN,UAAU,WACX,kBAAC,IAAD,CAAMA,UAAU,OAAOC,GAAG,cACtB,kBAACC,EAAA,EAAD,CAAQC,GAAG,WAAWC,QAAQ,WAAWC,MAAM,UAAUC,UAAW,kBAAC,IAAD,OAApE,4BCSLC,EAvBG,WACd,OACI,yBAAKP,UAAU,aACX,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,WACX,kBAAC,IAAD,CAAMA,UAAU,OAAOC,GAAG,cACtB,kBAACC,EAAA,EAAD,CAAQC,GAAG,WAAWC,QAAQ,YAAYC,MAAM,UAAUC,UAAW,kBAAC,IAAD,OAArE,eAKR,6BAAM,6BAAM,6BAAM,6BAClB,yBAAKN,UAAU,WACX,kBAAC,IAAD,CAAMA,UAAU,OAAOC,GAAG,cACtB,kBAACC,EAAA,EAAD,CAAQC,GAAG,WAAWC,QAAQ,YAAYC,MAAM,UAAUC,UAAW,kBAAC,IAAD,OAArE,iBCXdE,G,uLAEJ,OACC,yBAAKR,UAAU,OAEd,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,aAAaC,UAAWC,IAC1C,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,IAAIC,UAAWE,U,GAPvBC,cAeHC,gBAAUP,GCZLQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACL,kBAAC,IAAD,CAAUC,MCNNC,YAAYC,EAAaC,YAAgBC,ODOxC,kBAAC,IAAD,KACG,kBAAC,EAAD,QAGRC,SAASC,eAAe,SDoHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bb0bbc01.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n// import simpleReducer from './simpleReducer';\nexport default combineReducers({\n//  simpleReducer\n});","import React from \"react\";\nimport Button from '@material-ui/core/Button';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport AddIcon from '@material-ui/icons/Add';\nimport { Link } from \"react-router-dom\";\n\nconst landing = () => {\n    return (\n        <div className=\"landing\">\n            <div className='landing-image'></div>\n            <div className=\"newData\">\n                <Link className=\"Link\" to=\"/dashboard\">\n                    <Button id='UIbutton' variant=\"outlined\" color=\"default\" startIcon={<AddIcon />}>\n                        Create New Data\n                    </Button>\n                </Link>\n            </div>\n            <br /><br /><br /><br />\n            <div className=\"oldData\">\n                <Link className=\"Link\" to=\"/dashboard\">\n                    <Button id='UIbutton' variant=\"outlined\" color=\"default\" startIcon={<CloudUploadIcon />}>\n                        Upload Existing Data\n                    </Button>\n                </Link>\n            </div>\n        </div>\n    );\n};\n\nexport default landing;","import React from \"react\";\nimport Button from '@material-ui/core/Button';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport AddIcon from '@material-ui/icons/Add';\nimport { Link } from \"react-router-dom\";\n\nconst dashboard = () => {\n    return (\n        <div className=\"dashboard\">\n            <div className='dashboard-image'></div>\n            <div className=\"newData\">\n                <Link className=\"Link\" to=\"/dashboard\">\n                    <Button id='UIbutton' variant=\"contained\" color=\"primary\" startIcon={<AddIcon />}>\n                        Dashboard\n                    </Button>\n                </Link>\n            </div>\n            <br /><br /><br /><br />\n            <div className=\"oldData\">\n                <Link className=\"Link\" to=\"/dashboard\">\n                    <Button id='UIbutton' variant=\"contained\" color=\"primary\" startIcon={<CloudUploadIcon />}>\n                        Dashboard\n                    </Button>\n                </Link>\n            </div>\n        </div>\n    );\n};\n\nexport default dashboard;","import React, { Component } from 'react';\nimport { Route, Redirect, Switch, Link, HashRouter } from \"react-router-dom\";\nimport Landing from \"./components/landing/landing\";\nimport Dashboard from \"./components/dashboard/dashboard\";\nimport { connect } from 'react-redux';\nimport './App.css';\n\nimport { simpleAction } from './actions/simpleAction';\n\nclass App extends Component {\n render() {\n  return (\n   <div className=\"App\">\n    \n    <Switch>\n        <Route exact path=\"/dashboard\" component={Dashboard} />\n        <Route exact path=\"/\" component={Landing} />\n    </Switch>\n\n    \n   </div>\n  );\n }\n}\nexport default connect()(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n         <HashRouter>\n            <App />\n        </HashRouter>\n    </Provider>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\nexport default function configureStore() {\n return createStore(rootReducer, applyMiddleware(thunk));\n}"],"sourceRoot":""}