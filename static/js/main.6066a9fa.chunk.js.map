{"version":3,"sources":["actions/employee_actions.js","reducers/employeeReducer.js","reducers/monthsReducer.js","reducers/rootReducer.js","components/landing/landing.jsx","components/landing/landing_container.jsx","actions/database_actions.js","components/dashboard/dashboard.jsx","components/dashboard/dashboard_container.jsx","components/employee/employee.jsx","App.js","serviceWorker.js","index.js","store.js"],"names":["nextEmployeeId","initialState","employees","employeeReducer","state","action","Object","freeze","newState","merge","type","console","log","payload","id","info","employeeInfo","monthsReducer","appReducer","combineReducers","months","rootReducer","database","Landing","props","fileReader","FileReader","onload","event","setDatabase","JSON","parse","target","result","history","push","className","Button","variant","component","color","startIcon","onChange","file","readAsText","onError","err","accepts","multiple","maxFiles","maxFileSize","minFileSize","clickable","React","Component","withRouter","connect","ownprops","dispatch","Dashboard","this","map","employee","i","key","to","month","responsive","superLargeDesktop","breakpoint","max","min","items","partialVisibilityGutter","desktop","tablet","mobile","payperiodMonth","style","letterSpacing","fontWeight","additionalTransfrom","arrows","autoPlaySpeed","centerMode","containerClass","dotListClass","draggable","focusOnSelect","infinite","itemClass","keyBoardControl","minimumTouchDrag","partialVisible","renderButtonGroupOutside","renderDotsOutside","showDots","sliderClass","slidesToSlide","swipeable","employeeList","monthList","FormControl","InputLabel","Select","labelId","value","MenuItem","FormHelperText","fetchEmployees","createEmployee","showEmployee","employeeId","removeEmployee","Employee","name","match","params","employeeName","App","exact","path","DashboardContainer","Boolean","window","location","hostname","preloadedState","ReactDOM","render","store","createStore","applyMiddleware","thunk","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAOaA,EAAiB,ECJxBC,EAAe,CAACC,UAAW,IAkClBC,EAhCS,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCACxDC,OAAOC,OAAOH,GACd,IAAII,EAAWC,IAAM,GAAIL,GACzB,OAAQC,EAAOK,MAEb,IDV2B,kBCe3B,OAJEC,QAAQC,IAAI,sBACZD,QAAQC,IAAIJ,GAGPH,EAAOQ,QAEd,IDX2B,kBCY3B,MAAM,GAAN,mBACOT,GADP,CAEI,CACIU,GAAIT,EAAOS,GACXC,KAAMV,EAAOW,gBAIrB,IDVyB,gBCazB,IDL2B,kBCM3B,OAAOX,EAAOQ,QAEd,QACE,OAAOT,ICIEa,EAjCO,WAAyB,IAAxBb,EAAuB,uDAAf,GAAIC,EAAW,uCAC5CC,OAAOC,OAAOH,GACd,IAAII,EAAWC,IAAM,GAAIL,GAEzB,OADAO,QAAQC,IAAIR,GACJC,EAAOK,MAEb,IFV2B,kBEe3B,OAJEC,QAAQC,IAAI,sBACZD,QAAQC,IAAIJ,GAGPH,EAAOQ,QAEd,IFX2B,kBEY3B,MAAM,GAAN,mBACOT,GADP,CAEI,CACIU,GAAIT,EAAOS,GACXC,KAAMV,EAAOW,gBAIrB,IFVyB,gBEazB,IFL2B,kBEM3B,OAAOX,EAAOQ,QAEd,QACE,OAAOT,IC7BPc,EAAaC,YAAgB,CAC/BjB,UAAWC,EACXiB,OAAQH,IAYGI,EATK,SAACjB,EAAOC,GAExB,MAAoB,iBAAhBA,EAAOK,KACAL,EAAOiB,SAGXJ,EAAWd,EAAOC,I,gHCPvBkB,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,WAAa,IAAIC,WAEtB,EAAKD,WAAWE,OAAS,SAACC,GAGtB,EAAKJ,MAAMK,YAAYC,KAAKC,MAAMH,EAAMI,OAAOC,SAC/C,EAAKT,MAAMU,QAAQC,KAAnB,eATW,E,sEAeR,IAAD,OACN,OACI,yBAAKC,UAAU,WACf,yBAAKA,UAAU,kBACf,8BAGA,6BAAK,6BAAK,6BAAK,6BACf,yBAAKA,UAAU,WAEP,kBAACC,EAAA,EAAD,CAAQvB,GAAG,WAAWwB,QAAQ,WAAWC,UAAU,QAAQC,MAAM,UAAUC,UAAW,kBAAC,IAAD,OAClF,kBAAC,IAAD,CACIL,UAAU,iBACVM,SAAU,SAAAC,GACN,EAAKlB,WAAWmB,WAAWD,EAAK,KAEpCE,QAAS,SAAAC,GAAG,OAAInC,QAAQC,IAAIkC,IAC5BC,QAAS,CAAC,SACVC,UAAQ,EACRC,SAAU,EACVC,YAAa,IACbC,YAAa,EACbC,WAAS,GAET,sD,GAxCNC,IAAMC,WAoDbC,cAAWhC,GC5CXiC,eAZS,SAACpD,EAAOqD,GAG9B,OAFA9C,QAAQC,IAAI,kBACZD,QAAQC,IAAIR,GACL,MAGkB,SAAAsD,GACzB,MAAO,CACL7B,YAAa,SAAAP,GAAQ,OAAIoC,ECXF,SAACpC,GAAD,OAAc,SAAAoC,GACrCA,EAAS,CACLhD,KAHoB,eAIpBY,cDQ8BO,CAAYP,QAInCkC,CAGbjC,G,uEETIoC,E,YACF,WAAYnC,GAAO,2BACf,0CAAMA,I,kFAKNb,QAAQC,IAAI,0B,qCAG6B,IAAhCV,EAA+B,uDAArB0D,KAAKpC,MAAMtB,UAC1B+B,EAAS/B,EAAU2D,KAAI,SAACC,EAASC,GACjC,OACI,yBAAKC,IAAKD,EAAG3B,UAAU,gBACf,kBAAC,IAAD,CAAMA,UAAU,OAAO6B,GAAE,oBAAeH,IAC/B,yBAAK1B,UAAU,eAAe0B,QAKvD,OAAO7B,I,kCAGyB,IAA1Bb,EAAyB,uDAAlBwC,KAAKpC,MAAMJ,OACpBa,EAASb,EAAOyC,KAAI,SAACK,EAAMH,GAC3B,OACI,yBAAKC,IAAKD,EAAG3B,UAAU,gBACf,kBAAC,IAAD,CAAMA,UAAU,OAAO6B,GAAE,WAAMC,IAC3B,yBAAK9B,UAAU,eAAf,IAA+B8B,EAA/B,UAKpB,OAAOjC,I,+BAKP,IAAMkC,EAAa,CACfC,kBAAmB,CAEfC,WAAY,CAAEC,IAAK,IAAMC,IAAK,KAC9BC,MAAO,EACPC,wBAAyB,IAE7BC,QAAS,CACLL,WAAY,CAAEC,IAAK,IAAMC,IAAK,MAC9BC,MAAO,EACPC,wBAAyB,IAE7BE,OAAQ,CACJN,WAAY,CAAEC,IAAK,KAAMC,IAAK,KAC9BC,MAAO,EACPC,wBAAyB,IAE7BG,OAAQ,CACJP,WAAY,CAAEC,IAAK,IAAKC,IAAK,GAC7BC,MAAO,EACPC,wBAAyB,KAG7BI,EAAiB,EAMrB,OACI,yBAAKzC,UAAU,aACX,yBAAKA,UAAU,oBACf,6BAAM,6BAAM,6BACZ,wBAAI0C,MAAO,CAAEC,cAAe,OAAWC,WAAY,MAAnD,aACA,6BAAM,6BAAM,6BACZ,yBAAK5C,UAAU,YACX,yCACA,kBAAC,IAAD,CACI+B,WAAYA,EACZc,oBAAqB,EACrBC,QAAM,EACNC,cAAe,IACfC,YAAY,EACZhD,UAAU,GACViD,eAAe,YACfC,aAAa,GACbC,WAAS,EACTC,eAAe,EACfC,UAAQ,EACRC,UAAU,GACVC,iBAAe,EACfC,iBAAkB,GAClBC,gBAAc,EACdC,0BAA0B,EAC1BC,mBAAmB,EACnBC,UAAU,EACVC,YAAY,GACZC,cAAe,EACfC,WAAS,GAGT,yBAAK/D,UAAU,gBACX,kBAAC,IAAD,CAAMA,UAAU,OAAO6B,GAAG,aACtB,yBAAK7B,UAAU,eAAf,qBAGPwB,KAAKwC,iBAId,6BAAM,6BAAM,6BACZ,yBAAKhE,UAAU,YACX,+CACA,kBAAC,IAAD,CACI+B,WAAYA,EACZc,oBAAqB,EACrBC,QAAM,EACNC,cAAe,IACfC,YAAY,EACZhD,UAAU,GACViD,eAAe,YACfC,aAAa,GACbC,WAAS,EACTC,eAAe,EACfC,UAAQ,EACRC,UAAU,GACVC,iBAAe,EACfC,iBAAkB,GAClBC,gBAAc,EACdC,0BAA0B,EAC1BC,mBAAmB,EACnBC,UAAU,EACVC,YAAY,GACZC,cAAe,EACfC,WAAS,GAERvC,KAAKyC,cAId,6BAAM,6BAAM,6BACZ,yBAAKjE,UAAU,aACX,kBAACkE,EAAA,EAAD,CAAaxF,GAAG,mBACZ,kBAACyF,EAAA,EAAD,CAAYzF,GAAG,cAAf,mBACA,kBAAC0F,EAAA,EAAD,CACIC,QAAQ,aACR3F,GAAG,cACH4F,MAAO7B,EACPnC,SAnFC,SAAAd,GACjBiD,EAAkBjD,EAAMI,OAAO0E,QAoFf,kBAACC,EAAA,EAAD,CAAUD,MAAM,SACZ,sCAEJ,kBAACC,EAAA,EAAD,CAAUD,MAAO,GAAjB,WACA,kBAACC,EAAA,EAAD,CAAUD,MAAO,GAAjB,YACA,kBAACC,EAAA,EAAD,CAAUD,MAAO,GAAjB,UAEJ,kBAACE,EAAA,EAAD,sC,GA3JAvD,IAAMC,WAoKfC,cAAWI,GCxJXH,eAlBS,SAACpD,EAAOqD,GAG9B,OAFA9C,QAAQC,IAAI,kBACZD,QAAQC,IAAIR,GACL,CACLF,UAAWE,EAAMF,UACjBkB,OAAQhB,EAAMgB,WAIS,SAAAsC,GACzB,MAAO,CACLmD,eAAgB,kBAAMnD,GRdU,SAAAA,GAAQ,OAAIA,EAAS,CACrDhD,KAF2B,wBQgB3BoG,eAAgB,SAAA9F,GAAY,OAAI0C,ERRN,SAAC1C,GAAD,OAAkB,SAAA0C,GAC5CA,EAAS,CACLhD,KAJuB,kBAKvBI,IAAE,8BAAEd,KACJgB,kBQIqC8F,CAAe9F,KACxD+F,aAAc,kBAAMrD,ERCb,CACHhD,KAHqB,gBAIrBsG,eAHoB,IAAAA,GQCxBC,eAAgB,SAAAD,GAAU,OAAItD,EROJ,SAACsD,GAAD,OAAgB,SAAAtD,GAC1CA,EAAS,CACRhD,KAH0B,kBAI1BsG,gBQVsCC,CAAeD,QAI3CxD,CAGbG,GCtBIuD,E,YACF,WAAY1F,GAAQ,IAAD,8BACf,4CAAMA,KACDpB,MAAQ,CACT+G,KAAM,SAHK,E,kFAQfvD,KAAKxD,MAAM+G,KAAOvD,KAAKpC,MAAM4F,MAAMC,OAAOC,e,+BAI1C,OACI,yBAAKlF,UAAU,YACX,yBAAKA,UAAU,mBACf,6BAAM,6BAAM,6BACR,wBAAI0C,MAAO,CAAEC,cAAe,SAA5B,YACJ,6BAAM,6BAAM,6BAER,yBAAK3C,UAAU,iBACX,wDACA,4CACA,2CACA,2CACA,gDACA,mDACA,kDACA,gDACA,gDACA,2BAAIwB,KAAKxD,MAAM+G,Y,GA9BhB9D,IAAMC,WAyCdC,cAAW2D,GCpCpBK,G,wLAEJ,OACC,yBAAKnF,UAAU,OAEd,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOoF,OAAK,EAACC,KAAK,aAAalF,UAAWmF,IAC1C,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,0BAA0BlF,UAAW2E,IACvD,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,IAAIlF,UAAWhB,U,GARvB+B,cAgBHE,gBAAU+D,GCZLI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASV,MACvB,2DClBN,+CAUO,ICDgCW,EDC1BA,EAAiB,CAC1B7H,UAAW,CAAC,WAAY,WAAY,WAAY,YAChDkB,OAAQ,CAAC,UAAW,WAAY,QAAS,UAG7CT,QAAQC,IAAImH,GAEZC,IAASC,OACL,kBAAC,IAAD,CAAUC,OCTyBH,EDSHA,ECRzBI,YAAY9G,EAAa0G,EAAgBK,YAAgBC,QDS3D,kBAAC,IAAD,KACG,kBAAC,EAAD,QAGRC,SAASC,eAAe,SD4GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6066a9fa.chunk.js","sourcesContent":["export const FETCH_EMPLOYEES = 'FETCH_EMPLOYEES';\nexport const fetchEmployees = () => dispatch => dispatch({\n    type: FETCH_EMPLOYEES\n});\n\n\nexport const CREATE_EMPLOYEE = 'CREATE_EMPLOYEE';\nexport const nextEmployeeId = 0;\nexport const createEmployee = (employeeInfo) => dispatch => {\n    dispatch({\n        type: CREATE_EMPLOYEE,\n        id: nextEmployeeId++,\n        employeeInfo\n    })\n};\n\nexport const SHOW_EMPLOYEE = 'SHOW_EMPLOYEE';\nexport const showEmployee = employeeId => {\n    return {\n        type: SHOW_EMPLOYEE,\n        employeeId\n    };\n};\n\nexport const REMOVE_EMPLOYEE = 'REMOVE_EMPLOYEE';\nexport const removeEmployee = (employeeId) => dispatch => {\n    dispatch({\n     type: REMOVE_EMPLOYEE,\n     employeeId\n    })\n};\n","import merge from \"lodash/merge\";\nimport { FETCH_EMPLOYEES, CREATE_EMPLOYEE, SHOW_EMPLOYEE, REMOVE_EMPLOYEE } from \"../actions/employee_actions\";\n\nconst initialState = {employees: []};\n\nconst employeeReducer = (state = initialState, action) => {\n  Object.freeze(state);\n  let newState = merge({}, state);\n  switch (action.type) {\n\n    case FETCH_EMPLOYEES:\n      console.log('fetching employees')\n      console.log(newState)\n      // merge(newState,{[action.company.id]: action.company});\n\n    return action.payload;\n\n    case CREATE_EMPLOYEE:\n    return [\n        ...state,\n        {\n            id: action.id,\n            info: action.employeeInfo\n        }\n    ]\n\n    case SHOW_EMPLOYEE:\n    return action.payload;\n\n    case REMOVE_EMPLOYEE:\n    return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default employeeReducer;","import merge from \"lodash/merge\";\nimport { FETCH_EMPLOYEES, CREATE_EMPLOYEE, SHOW_EMPLOYEE, REMOVE_EMPLOYEE } from \"../actions/employee_actions\";\n\n\nconst monthsReducer = (state = {}, action) => {\n  Object.freeze(state);\n  let newState = merge({}, state);\n  console.log(state);\n  switch (action.type) {\n\n    case FETCH_EMPLOYEES:\n      console.log('fetching employees')\n      console.log(newState)\n      // merge(newState,{[action.company.id]: action.company});\n\n    return action.payload;\n\n    case CREATE_EMPLOYEE:\n    return [\n        ...state,\n        {\n            id: action.id,\n            info: action.employeeInfo\n        }\n    ]\n\n    case SHOW_EMPLOYEE:\n    return action.payload;\n\n    case REMOVE_EMPLOYEE:\n    return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default monthsReducer;","import { combineReducers } from 'redux';\nimport employeeReducer from './employeeReducer';\nimport monthsReducer from './monthsReducer';\n\nconst appReducer = combineReducers({\n    employees: employeeReducer,\n    months: monthsReducer\n  })\n  \nconst rootReducer = (state, action) => {\n\n    if (action.type === 'SET_DATABASE') {\n        return action.database\n    }\n\n    return appReducer(state, action)\n  }\n\nexport default rootReducer","import React from \"react\";\nimport Button from '@material-ui/core/Button';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport AddIcon from '@material-ui/icons/Add';\nimport { Link, withRouter } from \"react-router-dom\";\nimport Files from 'react-files'\nimport { setDatabase } from \"../../actions/database_actions\";\n\nclass Landing extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.fileReader = new FileReader();\n\n        this.fileReader.onload = (event) => {\n\n            debugger\n            this.props.setDatabase(JSON.parse(event.target.result));\n            this.props.history.push(`/dashboard`);  \n        };\n    }\n\n    \n\n    render () {\n        return (\n            <div className=\"landing\">\n            <div className='landing-image'></div>\n            <div>\n                \n            </div>\n            <br/><br/><br/><br/>\n            <div className=\"oldData\">\n                {/* <Link className=\"Link\" to=\"/dashboard\"> */}\n                    <Button id='UIbutton' variant=\"outlined\" component=\"label\" color=\"default\" startIcon={<CloudUploadIcon />}>\n                        <Files\n                            className=\"files-dropzone\"\n                            onChange={file => {\n                                this.fileReader.readAsText(file[0]);\n                            }}\n                            onError={err => console.log(err)}\n                            accepts={['.json']}\n                            multiple\n                            maxFiles={3}\n                            maxFileSize={10000000}\n                            minFileSize={0}\n                            clickable\n                        >\n                            <p>Upload Database</p> \n                        </Files>\n                    </Button>\n                {/* </Link> */}\n            </div>\n        </div>\n        );\n    }\n\n}\n\n\nexport default withRouter(Landing);\n{/* <input type=\"file\" style={{ display: \"none\" }} onChange={this.handleFiles}  /> */}","import { connect } from \"react-redux\";\nimport { setDatabase } from \"../../actions/database_actions\";\nimport Landing from \"./landing\";\n\nconst mapStateToProps = (state, ownprops) => {\n  console.log('mapstate2props')\n  console.log(state)\n  return {};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDatabase: database => dispatch(setDatabase(database)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Landing);","export const SET_DATABASE = 'SET_DATABASE';\nexport const setDatabase = (database) => dispatch => {\n    dispatch({\n        type: SET_DATABASE,\n        database\n    })\n};\n","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport Carousel from 'react-multi-carousel';\nimport 'react-multi-carousel/lib/styles.css';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n        debugger\n    }\n\n    componentWillMount() {\n        console.log('component will mount')\n    }\n\n    employeeList(employees=this.props.employees){\n        let result = employees.map((employee,i) => {\n            return (\n                <div key={i} className=\"carouselList\">\n                        <Link className=\"Link\" to={`/employee/${employee}`}>\n                                 <div className='listContent'>{employee}</div>\n                        </Link>\n                </div>\n            )\n        });\n        return result;\n    }\n\n    monthList(months=this.props.months){\n        let result = months.map((month,i) => {\n            return (\n                <div key={i} className=\"carouselList\">\n                        <Link className=\"Link\" to={`/${month}`}>\n                            <div className='listContent'> {month} </div>\n                        </Link>\n                </div>\n            )\n        });\n        return result;\n    }\n\n    render() {\n\n        const responsive = {\n            superLargeDesktop: {\n                // the naming can be any, depends on you.\n                breakpoint: { max: 4000, min: 3000 },\n                items: 5,\n                partialVisibilityGutter: 40\n            },\n            desktop: {\n                breakpoint: { max: 3000, min: 1024 },\n                items: 3,\n                partialVisibilityGutter: 40\n            },\n            tablet: {\n                breakpoint: { max: 1024, min: 464 },\n                items: 2,\n                partialVisibilityGutter: 30\n            },\n            mobile: {\n                breakpoint: { max: 464, min: 0 },\n                items: 1,\n                partialVisibilityGutter: 30\n            },\n        };\n        var payperiodMonth = 0;\n\n        const handleChange = event => {\n            payperiodMonth = (event.target.value);\n        };\n\n        return (\n            <div className=\"dashboard\">\n                <div className='dashboard-image'></div>\n                <br /><br /><br />\n                <h1 style={{ letterSpacing: 15 + 'px', fontWeight: 400 }} >DASHBOARD</h1>\n                <br /><br /><br />\n                <div className=\"carousel\">\n                    <h1>EMPLOYEES</h1>\n                    <Carousel\n                        responsive={responsive}\n                        additionalTransfrom={0}\n                        arrows\n                        autoPlaySpeed={3000}\n                        centerMode={false}\n                        className=\"\"\n                        containerClass=\"container\"\n                        dotListClass=\"\"\n                        draggable\n                        focusOnSelect={false}\n                        infinite\n                        itemClass=\"\"\n                        keyBoardControl\n                        minimumTouchDrag={80}\n                        partialVisible\n                        renderButtonGroupOutside={false}\n                        renderDotsOutside={false}\n                        showDots={false}\n                        sliderClass=\"\"\n                        slidesToSlide={1}\n                        swipeable\n                    >\n\n                        <div className=\"carouselList\">\n                            <Link className=\"Link\" to=\"/employee\">\n                                <div className='listContent'> + New Employee</div>\n                            </Link>\n                        </div>\n                        {this.employeeList()}\n                        \n                    </Carousel>\n                </div>\n                <br /><br /><br />\n                <div className=\"carousel\">\n                    <h1>MONTHLY SUMMARY</h1>\n                    <Carousel\n                        responsive={responsive}\n                        additionalTransfrom={0}\n                        arrows\n                        autoPlaySpeed={3000}\n                        centerMode={false}\n                        className=\"\"\n                        containerClass=\"container\"\n                        dotListClass=\"\"\n                        draggable\n                        focusOnSelect={false}\n                        infinite\n                        itemClass=\"\"\n                        keyBoardControl\n                        minimumTouchDrag={80}\n                        partialVisible\n                        renderButtonGroupOutside={false}\n                        renderDotsOutside={false}\n                        showDots={false}\n                        sliderClass=\"\"\n                        slidesToSlide={1}\n                        swipeable\n                    >\n                        {this.monthList()}\n\n                    </Carousel>\n                </div>\n                <br /><br /><br />\n                <div className=\"payperiod\">\n                    <FormControl id='paypperiodMonth'>\n                        <InputLabel id=\"monthLabel\">PayPeriod Month</InputLabel>\n                        <Select\n                            labelId=\"monthLabel\"\n                            id=\"monthSelect\"\n                            value={payperiodMonth}\n                            onChange={handleChange}\n                        >\n                            <MenuItem value=\"month\">\n                                <em>Month</em>\n                            </MenuItem>\n                            <MenuItem value={1}>January</MenuItem>\n                            <MenuItem value={2}>Feburary</MenuItem>\n                            <MenuItem value={3}>March</MenuItem>\n                        </Select>\n                        <FormHelperText>Select PayPeriod Month</FormHelperText>\n                    </FormControl>\n                </div>\n            </div>\n        );\n    };\n\n};\n\nexport default withRouter(Dashboard);","import { connect } from \"react-redux\";\nimport { fetchEmployees, createEmployee, showEmployee, removeEmployee } from \"../../actions/employee_actions\";\nimport Dashboard from \"./dashboard\";\n\nconst mapStateToProps = (state, ownprops) => {\n  console.log('mapstate2props')\n  console.log(state)\n  return {\n    employees: state.employees,\n    months: state.months\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchEmployees: () => dispatch(fetchEmployees()),\n    createEmployee: employeeInfo => dispatch(createEmployee(employeeInfo)),\n    showEmployee: () => dispatch(showEmployee()),\n    removeEmployee: employeeId => dispatch(removeEmployee(employeeId))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Dashboard);","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nclass Employee extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: 'hello'\n        }\n    }\n\n    componentWillMount() {\n        this.state.name = this.props.match.params.employeeName\n    }\n\n    render () {\n        return (\n            <div className=\"employee\">\n                <div className='employee-image'></div>\n                <br /><br /><br />\n                    <h1 style={{ letterSpacing: 15 + 'px' }} >EMPOLYEE</h1>\n                <br /><br /><br />\n    \n                    <div className='employee-info'>\n                        <h1>Form Style Employee Info</h1>\n                        <p>Employee Name</p>\n                        <p>Employee Sex</p>\n                        <p>Employee DOB</p>\n                        <p>Employee Province</p>\n                        <p>Employee Hourly Wage</p>\n                        <p>Employee Start Date</p>\n                        <p>Employee End Date</p>\n                        <p>Employee End Date</p>\n                        <p>{this.state.name}</p>\n    \n    \n                    </div>\n            </div>\n        );\n    }\n\n}\n\n\nexport default withRouter(Employee);","import React, { Component } from 'react';\nimport { Route, Redirect, Switch, Link, HashRouter } from \"react-router-dom\";\nimport Landing from \"./components/landing/landing_container\";\nimport DashboardContainer from \"./components/dashboard/dashboard_container\";\nimport Employee from \"./components/employee/employee\";\nimport { connect } from 'react-redux';\nimport './App.css';\n\nclass App extends Component {\n render() {\n  return (\n   <div className=\"App\">\n    \n    <Switch>\n        <Route exact path=\"/dashboard\" component={DashboardContainer} />\n        <Route exact path=\"/employee/:employeeName\" component={Employee} />\n        <Route exact path=\"/\" component={Landing} />\n    </Switch>\n\n    \n   </div>\n  );\n }\n}\nexport default connect()(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// export const preloadedState = {}\nexport const preloadedState = {\n    employees: ['Person 1', 'Person 2', 'Person 3', 'Person 4'],\n    months: ['January', 'Feburary', 'March', 'April']\n}\n\nconsole.log(preloadedState);\n\nReactDOM.render(\n    <Provider store={configureStore(preloadedState)}>\n         <HashRouter>\n            <App />\n        </HashRouter>\n    </Provider>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\n\n// const initialState = {\n//     employees: [],\n//     months: ['Jan', 'Feb', 'Mar']\n// };\n\nexport default function configureStore(preloadedState) {\n    return createStore(rootReducer, preloadedState, applyMiddleware(thunk));\n}"],"sourceRoot":""}